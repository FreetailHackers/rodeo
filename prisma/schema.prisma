datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  magicLink   String    @unique
  role        Role      @default(HACKER)
  status      Status    @default(CREATED)
  decision    Decision?
  application Json      @default("{}")
  scanCount   Json      @default("{}")
}

model Announcement {
  id        Int      @id @default(autoincrement())
  body      String
  published DateTime @default(now())
}

// Store unreleased decisions in their own table
model Decision {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  status Status
}

// Store global settings/configuration/configuration in a table with a single row
model Settings {
  id                Int       @id @default(0) // Dummy ID is to satisfy Prisma
  // TODO: Separate public and private settings into separate tables?
  // PUBLIC SETTINGS (all users must be able to see these)
  applicationOpen   Boolean   @default(true)
  confirmBy         DateTime?
  info              String    @default("Put everything anybody may need to know about your hackathon here.")
  homepageText      String    @default("This text can be edited from the admin panel. You can put deadlines, logistics, or other important information here.")
  // PRIVATE SETTINGS (settings that non-admins do not need)
  rollingAdmissions Boolean   @default(false)
  submitTemplate    String    @default("We have received your application to our hackathon!")
  acceptTemplate    String    @default("You have been accepted to our hackathon!")
  rejectTemplate    String    @default("We regret to inform you that we cannot offer you a spot at our hackathon this year.")
  waitlistTemplate  String    @default("We regret to inform you that we cannot offer you a spot at our hackathon at this time.")
  confirmTemplate   String    @default("Thank you for confirming your attendance to our hackathon! We look forward to seeing you there!")
  declineTemplate   String    @default("Thank you for letting us know that you will not be able to attend. We hope to see you next year!")
  scanActions       String[]
}

model Question {
  id          String       @id @default(uuid())
  label       String
  type        QuestionType
  required    Boolean      @default(false)
  order       Int          @unique
  placeholder String       @default("") // For sentences, paragraphs, and numbers
  options     String[] // For dropdowns, multiselects, checkboxes, and radios
  min         Float? // For numbers
  max         Float? // For numbers
  step        Float? // For numbers
  regex       String       @default("") // For sentences and paragraphs
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  start       DateTime
  end         DateTime
  location    String
  type        String
}

enum Role {
  HACKER
  ADMIN
  ORGANIZER // Same as VOLUNTEER but can scan Hacker IDs
  JUDGE // Should have access to judging
  VOLUNTEER // Miscenalleous volunteer; only has access to Hacker ID
  SPONSOR // Should have access to resumes
}

enum Status {
  CREATED // User has entered email but has not opened their magic link
  APPLIED // User has finished application
  ACCEPTED // User has been accepted but has not yet confirmed
  REJECTED // User has been rejected
  WAITLISTED // User has been waitlisted
  CONFIRMED // User has confirmed their attendance
  DECLINED // User has declined their attendance
}

enum QuestionType {
  SENTENCE
  PARAGRAPH
  NUMBER
  DROPDOWN
  MULTISELECT
  CHECKBOX
  RADIO
  FILE
}
