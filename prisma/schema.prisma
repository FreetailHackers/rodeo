generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AuthUser {
  id             String         @id @unique
  email          String         @unique
  hashedPassword String?
  githubId       Int?          
  githubUsername String?        
  googleId       String?
  goodleUsername String?
  provider       String?        
  roles          Role[]         @default([HACKER])
  status         Status         @default(CREATED)
  verifiedEmail  Boolean        @default(false)
  authKey        AuthKey[]
  authSession    AuthSession[]
  singleUseKey   SingleUseKey[]
  user           User?
}

model AuthSession {
  id            String   @id @unique
  userId        String
  expiresAt     DateTime
  authUser      AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuthKey {
  id               String   @id @unique
  hashedPassword   String?
  userId           String
  authUser         AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId       String?
  providerUserId   String?
  @@index([userId])
}

model SingleUseKey {
  id        String   @id @unique
  purpose   String
  expires   DateTime
  userId    String
  authUser  AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  authUserId    String         @id @unique
  scanCount     Json           @default("{}")
  application   Json           @default("{}")
  teamId        Int?
  mealGroup     String?
  decision      Decision?
  scans         Scan[]
  statusChanges StatusChange[]
  authUser      AuthUser       @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  team          Team?          @relation(fields: [teamId], references: [id])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  body      String
  published DateTime @default(now())
}

model Decision {
  userId String @id @unique
  status Status
  user   User   @relation(fields: [userId], references: [authUserId], onDelete: Cascade)
}

model Settings {
  id                        Int       @id @default(0)
  applicationOpen           Boolean   @default(true)
  rollingAdmissions         Boolean   @default(false)
  scanActions               String[]
  homepageText              String    @default("This text can be edited from the admin panel. You can put deadlines, logistics, or other important information here.")
  submitTemplate            String    @default("We have received your application to our hackathon!")
  acceptTemplate            String    @default("You have been accepted to our hackathon!")
  confirmTemplate           String    @default("Thank you for confirming your attendance to our hackathon! We look forward to seeing you there!")
  declineTemplate           String    @default("Thank you for letting us know that you will not be able to attend. We hope to see you next year!")
  rejectTemplate            String    @default("We regret to inform you that we cannot offer you a spot at our hackathon this year.")
  waitlistTemplate          String    @default("We regret to inform you that we cannot offer you a spot at our hackathon at this time.")
  timezone                  String    @default("America/Chicago")
  applicationDeadline       DateTime?
  applicationLimit          Int?
  daysToRSVP                Int?
  showAnnouncements         Boolean   @default(true)
  showChallenges            Boolean   @default(true)
  showFAQ                   Boolean   @default(true)
  showSchedule              Boolean   @default(true)
  showSponsors              Boolean   @default(true)
  withdrawalWarningTemplate String    @default("We've noticed that your application has been withdrawn from our hackathon. If you're still intending to submit, please ensure that you complete your edits and click 'submit'.")
  acceptIsHTML              Boolean   @default(false)
  byStatusIsHTML            Boolean   @default(false)
  confirmIsHTML             Boolean   @default(false)
  declineIsHTML             Boolean   @default(false)
  rejectIsHTML              Boolean   @default(false)
  submitIsHTML              Boolean   @default(false)
  waitlistIsHTML            Boolean   @default(false)
  withdrawIsHTML            Boolean   @default(false)
  hackathonStartDate        DateTime?
}

model Blacklist {
  id        String   @id @default(cuid())
  type      String         // 'email' | 'name'
  value     String
  createdAt DateTime @default(now())

  @@unique([type, value], name: "type_value")
}


model Question {
  id            String       @id @default(uuid())
  label         String
  type          QuestionType
  required      Boolean      @default(false)
  targetGroup   String[]
  order         Int          @unique
  placeholder   String       @default("")
  options       String[]
  min           Float?
  max           Float?
  step          Float?
  regex         String       @default("")
  custom        Boolean?
  multiple      Boolean?
  accept        String       @default("")
  maxSizeMB     Float        @default(1)
  sponsorView   Boolean      @default(false)
  hideAdmission Boolean      @default(false)
  hideScan      Boolean      @default(false)
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  start       DateTime?
  end         DateTime?
  location    String
  type        String
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Challenge {
  id          Int     @id @default(autoincrement())
  title       String
  prize       String?
  description String
}

model Sponsor {
  id       Int     @id @default(autoincrement())
  name     String
  imageKey String
  url      String?
}

model StatusChange {
  id        Int      @id @default(autoincrement())
  newStatus Status
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [authUserId], onDelete: Cascade)
}

model Scan {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [authUserId], onDelete: Cascade)
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  invitations Invitation[]
  members     User[]
}

model Invitation {
  id     Int              @id @default(autoincrement())
  teamId Int
  email  String
  userId String
  status InvitationStatus @default(PENDING)
  team   Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  HACKER
  ADMIN
  ORGANIZER // Same as VOLUNTEER but can scan Hacker IDs
  JUDGE // Should have access to judging
  VOLUNTEER // Miscenalleous volunteer; only has access to Hacker ID
  SPONSOR // Should have access to resumes
  MENTOR
  UNDECLARED
}

enum Status {
  CREATED
  APPLIED
  ACCEPTED
  REJECTED
  WAITLISTED
  CONFIRMED
  DECLINED
}

enum QuestionType {
  SENTENCE
  PARAGRAPH
  NUMBER
  DROPDOWN
  CHECKBOX
  RADIO
  FILE
}

enum CategoryType {
  FAQ
  CHALLENGE
  SPONSOR
}
